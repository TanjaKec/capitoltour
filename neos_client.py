# neos_client.py
#
# Portions based on http://neos-guide.org/content/NEOS-API#python_client
# Modified by Nathan Brixius, June 2016.
#
# This code solves traveling salesman problems using the Concorde solver
# hosted on neos-server.org.
#
# You can also modify it to solve other types of optimization problems using NEOS.

import sys
import xmlrpclib

class NeosClient:
    NEOS_HOST = "neos-server.org"
    NEOS_PORT = 3332

    def neos_server(self):
        return xmlrpclib.Server("http://%s:%d" % (self.NEOS_HOST, self.NEOS_PORT))

    def queue(self):
        msg = self.neos_server().printQueue()
        return msg

    def get_template(self, category, solver, input_method):
        neos = self.neos_server()
        result = neos.getSolverTemplate(category, solver, input_method)
        return result

    def read_xml(self, input):
        with open(input, "r") as xmlfile:
            xml=""
            buff = 1
            while buff:
                buff = xmlfile.read()
                xml += buff
        return xml

    def run(self, xml):
        # This call is blocking. If you look at the docs you can whip up an async version if you like.
        neos = self.neos_server()

        (jobNumber, password) = neos.submitJob(xml)
        print("Job # = %d " % jobNumber)

        offset = 0
        status = ""
        while status != "Done":
            (msg, offset) = neos.getIntermediateResults(jobNumber, password, offset)
            print(msg.data)
            status = neos.getJobStatus(jobNumber, password)

        return neos.getFinalResults(jobNumber, password).data

def make_tsplib(dist):
    tsp_template = """NAME: NEOS_TSP_AUTOGEN
TYPE: TSP
COMMENT: THIS FILE WAS AUTOGENERATED.
DIMENSION: %d
EDGE_WEIGHT_TYPE: EXPLICIT
EDGE_WEIGHT_FORMAT: FULL_MATRIX
EDGE_WEIGHT_SECTION:
%s
EOF
    """
    # The TSPLIB format, somewhat amazingly, wants integer weights.
    # Therefore we do a straight truncation of the float dist matrix here.
    # if you don't like that, scale before calling.
    dist_text = '\n'.join(' '.join(map(str, map(int, row))) for row in dist)
    return tsp_template % (len(dist), dist_text)

def make_neos_concorde(dist):
    xml_template = """<document>
<category>co</category>
<solver>concorde</solver>
<inputMethod>TSP</inputMethod>
<tsp>![CDATA[%s]]</tsp>
<ALGTYPE><![CDATA[con]]></ALGTYPE>
<RDTYPE><![CDATA[fixed]]></RDTYPE>
<PLTYPE><![CDATA[no]]></PLTYPE>
</document>"""
    return xml_template % make_tsplib(dist)

def tour_from_neos_concorde_result(result):
    end_token = '***'
    loc = result.rfind(end_token)
    if loc >= 0:
        text = result[loc + len(end_token):]
        nums = map(int, text.split())
        nums = nums[2:] # the first two tokens refer to problem size
        return [nums[i * 3] for i in range(len(nums) / 3)] # the tour is the first location on each line
    return None

def solve_tsp_neos_concorde(dist):
    xml = make_neos_concorde(dist)
    neos = NeosClient()
    result = neos.run(xml)
    return tour_from_neos_concorde_result(result)